
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // --- Admin Rules ---
    // Admin has full read/write access everywhere.
    match /{document=**} {
      allow read, write: if request.auth != null && request.auth.token.email == "mathius@admin.staff";
    }

    // --- Authenticated User Rules (for login/role check) ---
    // Any authenticated user can read the list of teachers to find their own role.
    // This is necessary for the robust login flow which might need to query by UID.
    match /teachers/{teacherId} {
      allow read: if request.auth != null;
    }
    
    // --- D.O.S. Rules ---
    function isDos() {
      // Check if the requesting user's document in 'teachers' has the role 'dos'.
      // This is a secure way to check for roles.
      return request.auth != null && get(/databases/$(database)/documents/teachers/$(request.auth.uid)).data.role == 'dos';
    }
    
    // D.O.S. can manage these collections.
    match /teachers/{teacherId} {
        // D.O.S. can write to any teacher document. Read is already granted above.
        allow write: if isDos();
    }
    match /students/{studentId} {
        allow read, write: if isDos();
    }
    match /classes/{classId} {
      allow read, write: if isDos();
    }
    match /subjects/{subjectId} {
      allow read, write: if isDos();
    }
    match /terms/{termId} {
      allow read, write: if isDos();
    }
    match /exams/{examId} {
      allow read, write: if isDos();
    }
    match /gradingPolicies/{policyId} {
        allow read, write: if isDos();
    }
    match /settings/general {
        allow read, write: if isDos();
    }
     match /attendance/{recordId} {
      allow read: if isDos();
    }

    // --- Teacher Rules ---
    function isTeacher() {
      // Check if the requesting user's document in 'teachers' has the role 'teacher'.
      return request.auth != null && get(/databases/$(database)/documents/teachers/$(request.auth.uid)).data.role == 'teacher';
    }
    
    // Teachers can read their own assignments (classes, subjects, students in their classes).
    match /classes/{classId} {
      allow get: if isTeacher();
    }
     match /subjects/{subjectId} {
      allow get: if isTeacher();
    }
    match /students/{studentId} {
      allow get: if isTeacher();
      // Allow teacher to list students only for their assigned classes.
      allow list: if isTeacher() && request.query.where[0].field == 'classId';
    }
    match /exams/{examId} {
      allow get: if isTeacher();
    }
    match /terms/{termId} {
      allow get: if isTeacher();
    }

    // Teachers can create and read their own mark submissions.
    match /markSubmissions/{submissionId} {
      allow create, read: if isTeacher() && request.resource.data.teacherId == request.auth.uid;
      // D.O.S. can also read/write to review/approve.
      allow read, write: if isDos(); 
    }
    
     // Attendance can be created by a teacher for one of their classes.
    match /attendance/{recordId} {
      allow create, update: if isTeacher() && request.resource.data.teacherId == request.auth.uid;
      allow read: if isTeacher();
    }

    // --- Public Rules ---
    // Website content is readable by anyone, but only writable by admin.
    match /website_content/homepage {
      allow get: if true;
      allow write: if request.auth != null && request.auth.token.email == "mathius@admin.staff";
    }
  }
}
